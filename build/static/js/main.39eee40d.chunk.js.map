{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","importance","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","className","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","important","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"0KAceA,EAZF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBAEND,EAAKE,WAEnB,OACE,+BACGF,EAAKG,QACN,wBAAQC,QAASH,EAAjB,SAAoCD,EAAKG,c,gBCRzCE,EAAU,aAsBD,EAnBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAM,SAAAC,GAAQ,OAAIA,EAASC,SAiB/B,EAbA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAM,SAAAC,GAAQ,OAAIA,EAASC,SAW/B,EAPA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAM,SAAAC,GAAQ,OAAIA,EAASC,SCZxCK,EAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAErB,OAAc,MAAXA,EACM,KAIP,qBAAKC,UAAU,QAAf,SACGD,KAMDE,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GAuFSC,EAlFH,SAACC,GAEX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAKAC,qBAAU,WAERC,IAAqB3B,MAAK,SAAA4B,GAExBT,EAASS,QAEV,IAGH,IAwCMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAQ,SAAAtC,GAAI,OAAIA,EAAKuC,aAEjE,OACE,gCACE,6CACA,uCACA,cAAC,EAAD,CAAcvB,QAASgB,IACvB,8BACE,yBAAQ5B,QAAS,kBAAM2B,GAAYD,IAAnC,mBAAoDA,EAAU,YAAc,WAE9E,oBAAIb,UAAU,QAAd,SACEoB,EAAYG,KAAK,SAACxC,GAAD,OAAU,cAAC,EAAD,CAAMC,iBAAkB,kBAhC9B,SAACY,GAC1B,IAAMb,EAAO0B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAE7B,KAAOA,KAChC8B,EAAW,2BAAQ3C,GAAR,IAAcuC,WAAYvC,EAAKuC,YAEhDJ,EAAmBtB,EAAI8B,GAAanC,MAAK,SAAAoC,GACvCjB,EAASD,EAAMc,KAAI,SAAAxC,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAO4C,SAClDC,OAAM,SAAAC,GAGPb,EAAgB,SAAD,OAAUjC,EAAKG,QAAf,sCAGf4C,YAAW,WACTd,EAAgB,QACf,KAEHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAE7B,KAAOA,SAgBuBmC,CAAmBhD,EAAKa,KAAmBb,KAAMA,GAAfA,EAAKa,SAElG,uBAAMoC,SArDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBjD,QAASyB,EACTyB,MAAM,IAAIC,MAAOC,cACjBhB,UAAWiB,KAAKC,SAAW,IAG7BtB,EAAmBiB,GAAY5C,MAAM,SAAAoC,GACnCjB,EAASD,EAAMgC,OAAOd,IACtBf,EAAW,QA2CX,UACE,uBAAO8B,MAAO/B,EAASgC,SAvCJ,SAACV,GACxBrB,EAAWqB,EAAMW,OAAOF,UAuCpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCzGNC,IAASC,OAAQ,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.39eee40d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance}) => {\r\n\r\n  const label = note.importance ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{note.content}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\n// get data from db\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then( response => response.data)\r\n}\r\n\r\n// add data into db\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then( response => response.data)\r\n}\r\n\r\n// change data from db\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then( response => response.data)\r\n}\r\n\r\n// returns a object that has 3 functions\r\n// as the name of the key and the name of the value of the key (function) are the same, we can use a cleaner syntax instead of { getAll: getAll, create: create, update: update }\r\nexport default { getAll, create, update }","import { useState, useEffect } from 'react' // hook\nimport Note from './components/Note'\nimport axios from 'axios' //backend library to connect with json server\nimport noteService from './services/notes'\n\n// component for error messages\nconst Notification = ({message}) => {\n\n  if(message == null){\n    return null\n  }\n\n  return (\n    <div className='error'>\n      {message}\n    </div>\n  ) \n\n}\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2022</em>\n    </div>\n  )\n}\n\nconst App = (props) => {\n\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  //console.log(props);\n\n  // fetching data from json server\n  useEffect(() => {\n    //console.log('effect')\n    noteService.getAll().then(initialNotes => {\n      //console.log('promise fulfilled')\n      setNotes(initialNotes)\n    })\n  }, [])\n  //console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    }\n    \n    noteService.create(noteObject).then( returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n\n  }\n  \n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id) // The array find method is used to find the note we want to modify, and we then assign it to the note variable\n    const changedNote = { ...note, important: !note.important } //  creating a new object that is an exact copy of the old note, apart from the important property.\n\n    noteService.update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote)) // updating the right object\n    }).catch(error => {\n      \n      // display error message\n      setErrorMessage(`Note '${note.content}' was already removed from server`)\n\n      // remove error message\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n\n      setNotes(notes.filter(n => n.id !== id))\n    })\n\n  }\n\n  const notesToShow = showAll ? notes : notes.filter( note => note.important)\n\n  return (\n    <div>\n      <h1>Hello World</h1>\n      <h1>Notes</h1>\n      <Notification message={errorMessage}/> \n      <div>\n        <button onClick={() => setShowAll(!showAll)}> Show {showAll ? 'important' : 'all'}</button>\n      </div>\n      <ul className='notes'>\n      { notesToShow.map( (note) => <Note toggleImportance={() => toggleImportanceOf(note.id)} key={note.id} note={note} /> )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">Save</button>\n      </form>  \n      <Footer />\n    </div>\n  )\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n\n\n\n"],"sourceRoot":""}